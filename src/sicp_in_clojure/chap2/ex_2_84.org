(declare succ-raise)

(defn apply-generic-helper [op & args]
  (let [type-tags (map type-tag args)
        proc (get op type-tags)]
    (if proc
      (apply proc (map contents args))
      (let [[a1 a2] (succ-raise (first args) (fnext args))]
        (apply-generic-helper op a1 a2)))))

(defn apply-generic [op & args]
  (if (> (count args) 1)
    (let [f (fn [arg1 arg2]
              (let [args (list arg1 arg2)]
                (apply apply-generic-helper op  args)))]
      (reduce f args))
    (apply apply-generic-helper op  args)))

;; Building tower

(def tower  ['rational 'scheme-number 'complex])

(defn raise [n]
  (let [f {
           'rational (fn [n]
                       (let [[d n] (contents n)]
                         (* 1.0 (/ d n))))
           'scheme-number (fn [n]
                            (make-complex-from-real-imag n 0))}]
    ((f (type-tag n)) n)))

(defn succ-raise [n1 n2]
  (let [idx #(.indexOf tower (type-tag %))
        a (idx n1)
        b (idx n2)
        f (fn [x num]
            (let [n (atom x)
                  i (idx num)]
              (while (not= (idx @n) i)
                (swap! n raise))
              @n))]
    (if (< a b)
      (list (f n1 n2) n2)
      (list n1 (f n2 n1)))))
